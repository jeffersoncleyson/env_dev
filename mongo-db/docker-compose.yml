####
#### https://sntnupl.com/mongodb-replicaset-for-development-using-docker
#### https://github.com/sntnupl/devcontainers-mongodb-replica-set-with-docker
#### https://github.com/willitscale/learning-docker/blob/master/tutorial-12/docker-compose.yml
####

version: '3.9'


networks:
  mongo-cluster:


services: 

################################################################################
# setup key openssl to cluster for production
# Container generates a certificate and after that its status became down
################################################################################

  mongo-keys:
    image: depop/openssl-bats
    volumes:
      - ./volumes/mongo-keys:/mongo-conf
    command: 'bash -c "openssl rand -base64 741 > /mongo-conf/mongodb-keyfile; chmod 600 /mongo-conf/mongodb-keyfile; chown 999 /mongo-conf/mongodb-keyfile"'
    volumes:
      - ./volumes/mongo-keys/:/mongo-conf/

################################################################################
# setup MongoDB cluster for production
# Container execute monsetup.sh and after that its status became down
################################################################################

  mongo-replica-setup:
    container_name: mongo-setup
    image: 'mongo:latest'
    restart: on-failure
    networks:
      - mongo-cluster
    volumes:
      ### STATIC FILES
      - ./static-files-mongodb/script/mongosetup.sh:/scripts/mongosetup.sh
    entrypoint: ["bash", "/scripts/mongosetup.sh" ]
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    depends_on:
      - mongo-keys
      - mongo1
      - mongo2
      - mongo3

################################################################################
# PRIMARY NODE MONGO DB
################################################################################

  mongo1:
    hostname: 'mongo1'
    container_name: 'mongo1'
    image: 'mongo:latest'
    restart: 'on-failure'
    command: ["-f", "/etc/mongod.conf", "--port", "30001", "--keyFile", "/opt/keyfile/mongodb-keyfile", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all"]
    expose: 
      - 30001
    ports: 
      - 30001:30001 
    networks: 
      - mongo-cluster
    volumes:
      ### DATA
      - ./volumes/mongodb-01/data:/data/db
      ### STATIC FILES
      - ./static-files-mongodb/init/:/docker-entrypoint-initdb.d/
      - ./static-files-mongodb/conf/mongod.conf:/etc/mongod.conf
      - ./volumes/mongo-keys/:/opt/keyfile/
    healthcheck:
      test: echo 'rs.status().ok' | mongo admin --port 30001 -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo-keys

################################################################################
# SECONDARY NODE MONGO DB
################################################################################

  mongo2:
    hostname: 'mongo2'
    container_name: 'mongo2'
    image: 'mongo:latest'
    command: ["-f", "/etc/mongod.conf","--port", "30002", "--keyFile", "/opt/keyfile/mongodb-keyfile", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all"]
    restart: 'on-failure'
    expose: 
      - 30002
    ports: 
      - 30002:30002  
    networks: 
      - mongo-cluster
    volumes:
      ### DATA
      - ./volumes/mongodb-02/data/:/data/db/
      ### STATIC FILES
      - ./static-files-mongodb/conf/mongod.conf:/etc/mongod.conf
      - ./volumes/mongo-keys/:/opt/keyfile/
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo-keys
      - mongo1

################################################################################
# SECONDARY NODE MONGO DB
################################################################################

  mongo3:
    hostname: 'mongo3'
    container_name: 'mongo3'
    image: 'mongo:latest'
    command: ["-f", "/etc/mongod.conf", "--port", "30003", "--keyFile", "/opt/keyfile/mongodb-keyfile", "--replSet", "${MONGO_REPLICA_SET_NAME}", "--bind_ip_all"]
    restart: 'on-failure'
    expose: 
      - 30003
    ports: 
      - 30003:30003  
    networks: 
      - mongo-cluster
    volumes:
      ### DATA
      - ./volumes/mongodb-03/data/:/data/db/
      ### STATIC FILES
      - ./static-files-mongodb/conf/mongod.conf:/etc/mongod.conf
      - ./volumes/mongo-keys/:/opt/keyfile/
    env_file:
      - .env
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 30s
      start_period: 60s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo-keys
      - mongo1